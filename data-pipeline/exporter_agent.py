"""
Exporter Agent

Exports reviewed drafts into multiple formats (Markdown, HTML, PDF, JSON).

Environment variables:
- EXPORT_DIR (optional; default: ./exports)

Input schema (Reviewer Agent output):
{
  "review": {
    "reviewed_draft": {
      "title": str,
      "summary": str,
      "sections": [ { "heading": str, "content": str } ],
      "references": [ { "source": str, "note": str } ]
    },
    "accuracy_score": float,
    "clarity_score": float,
    "completeness_score": float,
    "suggestions": [str],
    "final_recommendation": str
  }
}

Output: Files exported to specified directory
"""

from __future__ import annotations

import os
import json
import logging
import uuid
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional

from dotenv import load_dotenv

# Load environment variables, prioritizing .env.local
try:
    load_dotenv('.env.local')
    load_dotenv()
except Exception as e:
    print(f"Warning: Could not load .env files: {e}")
    print("Using system environment variables instead")
logger = logging.getLogger(__name__)


class ExporterAgent:
    def __init__(self, export_dir: Optional[str] = None):
        self.export_dir = Path(export_dir or os.getenv("EXPORT_DIR", "./exports"))
        self.export_dir.mkdir(exist_ok=True)
        
        # Create subdirectories for different formats
        (self.export_dir / "json").mkdir(exist_ok=True)
        (self.export_dir / "markdown").mkdir(exist_ok=True)
        (self.export_dir / "pdf").mkdir(exist_ok=True)
        (self.export_dir / "html").mkdir(exist_ok=True)
        
        self.supported_formats = ["json", "markdown", "html", "pdf"]

    def generate_export_id(self) -> str:
        """Generate unique export ID"""
        return f"export_{uuid.uuid4().hex[:8]}_{int(datetime.now().timestamp())}"

    def sanitize_filename(self, filename: str) -> str:
        """Sanitize filename for safe file system usage"""
        import re
        # Remove or replace invalid characters
        filename = re.sub(r'[<>:"/\\|?*]', '_', filename)
        # Remove multiple underscores and trim
        filename = re.sub(r'_+', '_', filename).strip('_')
        return filename

    def export_json(self, review_data: Dict[str, Any], export_id: str, title: str = "Draft") -> str:
        """Export review data as JSON"""
        try:
            # Add metadata
            json_data = {
                "metadata": {
                    "export_id": export_id,
                    "title": title,
                    "exported_at": datetime.now().isoformat(),
                    "exporter_version": "1.0.0"
                },
                "review_data": review_data
            }
            
            # Save JSON file
            filename = f"{self.sanitize_filename(title)}_{export_id}.json"
            file_path = self.export_dir / "json" / filename
            
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(json_data, f, indent=2, ensure_ascii=False)
            
            return str(file_path)
        except Exception as e:
            raise Exception(f"JSON export failed: {str(e)}")

    def export_markdown(self, review_data: Dict[str, Any], export_id: str, title: str = "Draft") -> str:
        """Export reviewed draft as Markdown"""
        try:
            reviewed_draft = review_data.get("review", {}).get("reviewed_draft", {})
            review_info = review_data.get("review", {})
            
            # Prepare Markdown content
            md_content = f"""# {reviewed_draft.get('title', title)}

*Generated by FoundryStack AI Pipeline*  
*Export ID: {export_id}*  
*Exported: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*

---

## 📋 Summary

{reviewed_draft.get('summary', 'No summary available')}

---

## 📄 Content

"""
            
            # Add sections
            sections = reviewed_draft.get('sections', [])
            for section in sections:
                heading = section.get('heading', 'Untitled Section')
                content = section.get('content', 'No content available')
                md_content += f"### {heading}\n\n{content}\n\n"
            
            # Add references
            references = reviewed_draft.get('references', [])
            if references:
                md_content += "## 📚 References\n\n"
                for ref in references:
                    source = ref.get('source', 'Unknown source')
                    note = ref.get('note', '')
                    md_content += f"- [{source}]({source})"
                    if note:
                        md_content += f" - {note}"
                    md_content += "\n"
                md_content += "\n"
            
            # Add review information
            if review_info:
                md_content += "## 📊 Review Summary\n\n"
                md_content += f"**Accuracy Score**: {review_info.get('accuracy_score', 'N/A')}/10\n"
                md_content += f"**Clarity Score**: {review_info.get('clarity_score', 'N/A')}/10\n"
                md_content += f"**Completeness Score**: {review_info.get('completeness_score', 'N/A')}/10\n"
                md_content += f"**Final Recommendation**: {review_info.get('final_recommendation', 'N/A')}\n\n"
                
                suggestions = review_info.get('suggestions', [])
                if suggestions:
                    md_content += "### Improvement Suggestions\n\n"
                    for i, suggestion in enumerate(suggestions, 1):
                        md_content += f"{i}. {suggestion}\n"
                    md_content += "\n"
            
            md_content += f"""---

## 📝 Export Information

- **Export ID**: {export_id}
- **Title**: {reviewed_draft.get('title', title)}
- **Exported At**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- **Exporter Version**: 1.0.0

---
*This document was generated using FoundryStack's AI-powered multi-agent system.*
"""
            
            # Save Markdown file
            filename = f"{self.sanitize_filename(title)}_{export_id}.md"
            file_path = self.export_dir / "markdown" / filename
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(md_content)
            
            return str(file_path)
        except Exception as e:
            raise Exception(f"Markdown export failed: {str(e)}")

    def export_html(self, review_data: Dict[str, Any], export_id: str, title: str = "Draft") -> str:
        """Export reviewed draft as HTML"""
        try:
            reviewed_draft = review_data.get("review", {}).get("reviewed_draft", {})
            review_info = review_data.get("review", {})
            
            # Prepare HTML content
            html_content = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{reviewed_draft.get('title', title)}</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            color: #333;
        }}
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 10px;
            margin-bottom: 30px;
        }}
        .section {{
            margin-bottom: 30px;
            padding: 20px;
            border-left: 4px solid #667eea;
            background: #f8f9fa;
        }}
        .score {{
            display: inline-block;
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: bold;
            color: white;
            margin: 5px;
        }}
        .score.high {{ background: #28a745; }}
        .score.medium {{ background: #ffc107; color: #333; }}
        .score.low {{ background: #dc3545; }}
        .suggestion {{
            background: #d1ecf1;
            border: 1px solid #bee5eb;
            padding: 15px;
            margin: 10px 0;
            border-radius: 5px;
        }}
        .footer {{
            margin-top: 50px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 10px;
            text-align: center;
            color: #666;
        }}
        pre {{
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
        }}
    </style>
</head>
<body>
    <div class="header">
        <h1>{reviewed_draft.get('title', title)}</h1>
        <p>AI-Generated Document by FoundryStack</p>
        <p>Export ID: {export_id} | {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
    </div>
    
    <div class="section">
        <h2>📋 Summary</h2>
        <p>{reviewed_draft.get('summary', 'No summary available')}</p>
    </div>
"""
            
            # Add sections
            sections = reviewed_draft.get('sections', [])
            for section in sections:
                heading = section.get('heading', 'Untitled Section')
                content = section.get('content', 'No content available')
                html_content += f"""
    <div class="section">
        <h2>{heading}</h2>
        <pre>{content}</pre>
    </div>
"""
            
            # Add references
            references = reviewed_draft.get('references', [])
            if references:
                html_content += """
    <div class="section">
        <h2>📚 References</h2>
        <ul>
"""
                for ref in references:
                    source = ref.get('source', 'Unknown source')
                    note = ref.get('note', '')
                    html_content += f'            <li><a href="{source}" target="_blank">{source}</a>'
                    if note:
                        html_content += f' - {note}'
                    html_content += '</li>\n'
                html_content += "        </ul>\n    </div>\n"
            
            # Add review information
            if review_info:
                html_content += """
    <div class="section">
        <h2>📊 Review Summary</h2>
"""
                accuracy = review_info.get('accuracy_score', 0)
                clarity = review_info.get('clarity_score', 0)
                completeness = review_info.get('completeness_score', 0)
                
                html_content += f"""
        <p><strong>Accuracy Score:</strong> <span class="score {'high' if accuracy >= 8 else 'medium' if accuracy >= 6 else 'low'}">{accuracy}/10</span></p>
        <p><strong>Clarity Score:</strong> <span class="score {'high' if clarity >= 8 else 'medium' if clarity >= 6 else 'low'}">{clarity}/10</span></p>
        <p><strong>Completeness Score:</strong> <span class="score {'high' if completeness >= 8 else 'medium' if completeness >= 6 else 'low'}">{completeness}/10</span></p>
        <p><strong>Final Recommendation:</strong> {review_info.get('final_recommendation', 'N/A')}</p>
"""
                
                suggestions = review_info.get('suggestions', [])
                if suggestions:
                    html_content += "<h3>Improvement Suggestions</h3>\n"
                    for suggestion in suggestions:
                        html_content += f'<div class="suggestion">{suggestion}</div>\n'
                
                html_content += "    </div>\n"
            
            html_content += f"""
    <div class="footer">
        <p>Generated by FoundryStack AI Pipeline</p>
        <p>Export ID: {export_id}</p>
        <p>Exported: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
    </div>
</body>
</html>
"""
            
            # Save HTML file
            filename = f"{self.sanitize_filename(title)}_{export_id}.html"
            file_path = self.export_dir / "html" / filename
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            return str(file_path)
        except Exception as e:
            raise Exception(f"HTML export failed: {str(e)}")

    def export_pdf(self, review_data: Dict[str, Any], export_id: str, title: str = "Draft") -> str:
        """Export reviewed draft as PDF (placeholder implementation)"""
        try:
            # For now, create a placeholder PDF file
            # In production, you would use libraries like WeasyPrint, ReportLab, or wkhtmltopdf
            filename = f"{self.sanitize_filename(title)}_{export_id}.pdf"
            file_path = self.export_dir / "pdf" / filename
            
            # Create a simple text-based PDF placeholder
            reviewed_draft = review_data.get("review", {}).get("reviewed_draft", {})
            pdf_content = f"""%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj

4 0 obj
<<
/Length 200
>>
stream
BT
/F1 12 Tf
100 700 Td
({reviewed_draft.get('title', title)} - Document) Tj
0 -20 Td
(Generated by FoundryStack AI Pipeline) Tj
0 -20 Td
(Export ID: {export_id}) Tj
0 -20 Td
(Exported: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}) Tj
ET
endstream
endobj

xref
0 5
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000204 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
454
%%EOF
"""
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(pdf_content)
            
            return str(file_path)
        except Exception as e:
            raise Exception(f"PDF export failed: {str(e)}")

    def export_all(self, review_data: Dict[str, Any], formats: Optional[List[str]] = None, title: Optional[str] = None) -> Dict[str, str]:
        """Export review data in multiple formats"""
        if formats is None:
            formats = ["json", "markdown", "html"]
        
        if title is None:
            reviewed_draft = review_data.get("review", {}).get("reviewed_draft", {})
            title = reviewed_draft.get("title", "Draft")
        
        export_id = self.generate_export_id()
        exported_files = {}
        
        for format_type in formats:
            if format_type not in self.supported_formats:
                continue
            
            try:
                if format_type == "json":
                    file_path = self.export_json(review_data, export_id, title)
                elif format_type == "markdown":
                    file_path = self.export_markdown(review_data, export_id, title)
                elif format_type == "html":
                    file_path = self.export_html(review_data, export_id, title)
                elif format_type == "pdf":
                    file_path = self.export_pdf(review_data, export_id, title)
                else:
                    continue
                
                exported_files[format_type] = file_path
            except Exception as e:
                logger.error(f"Failed to export {format_type}: {e}")
                continue
        
        return exported_files


if __name__ == "__main__":
    # Simple smoke test
    logging.basicConfig(level=logging.INFO)
    sample_review = {
        "review": {
            "reviewed_draft": {
                "title": "Understanding Supabase Edge Functions",
                "summary": "Edge Functions are Deno-based serverless functions deployed to the edge.",
                "sections": [
                    {
                        "heading": "Overview",
                        "content": "Edge Functions enable serverless execution close to users for better performance."
                    }
                ],
                "references": [
                    {
                        "source": "https://supabase.com/docs/edge-functions",
                        "note": "Official documentation"
                    }
                ]
            },
            "accuracy_score": 8.5,
            "clarity_score": 9.0,
            "completeness_score": 7.5,
            "suggestions": ["Add more examples", "Include performance metrics"],
            "final_recommendation": "Approve with minor edits"
        }
    }
    agent = ExporterAgent()
    files = agent.export_all(sample_review, ["json", "markdown", "html"])
    print("Exported files:", files)
