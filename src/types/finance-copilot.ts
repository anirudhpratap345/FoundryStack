// ============================================================================
// FINANCE COPILOT - TYPE DEFINITIONS
// ============================================================================
// Complete type system for the AI Finance Copilot for Founders
// ============================================================================

// ============================================================================
// INPUT MODELS - What the user provides via the form
// ============================================================================

/**
 * Structured inputs collected from the founder via the form
 */
export interface StartupInputs {
  // Basic Information
  startupName: string;
  industry: string; // e.g., "Fintech", "Healthcare", "SaaS"
  targetMarket: 'B2B' | 'B2C' | 'B2B2C';
  geography: string; // e.g., "United States", "India", "UK"
  
  // Team & Product
  teamSize: number; // Current number of people
  productStage: ProductStage;
  
  // Traction & Revenue
  monthlyRevenue?: number; // USD, optional for pre-revenue
  growthRate?: string; // e.g., "20% MoM", "100 signups/week"
  tractionSummary?: string; // Any notable achievements
  
  // Financial
  businessModel: string; // e.g., "SaaS subscription", "Marketplace"
  fundingGoal?: number; // USD, optional - what founder thinks they need
  mainFinancialConcern: string; // Free text - what keeps them up at night
}

export type ProductStage = 
  | 'Idea'           // Just a concept, no code yet
  | 'MVP'            // Minimum viable product built
  | 'Beta'           // In testing with early users
  | 'Early Revenue'  // First paying customers
  | 'Growth';        // Scaling revenue

// ============================================================================
// OUTPUT MODELS - What the AI generates
// ============================================================================

/**
 * Complete financial strategy report generated by the AI
 */
export interface FundingStrategy {
  // Core Recommendations
  recommendedStage: StageRecommendation;
  raiseAmount: RaiseRecommendation;
  investorTypes: InvestorRecommendation[];
  runway: RunwayAnalysis;
  priorities: FinancialPriority[];
  
  // Narrative & Context
  fundingNarrative: string;      // 3-4 paragraph story
  keyRisks: string[];            // 3-5 major risks to watch
  nextMilestones: string[];      // 3-5 concrete goals
  
  // Metadata
  generatedAt: string;           // ISO timestamp
  confidence: OverallConfidence; // AI's confidence in recommendations
}

/**
 * Funding stage recommendation with reasoning
 */
export interface StageRecommendation {
  stage: FundingStage;
  reasoning: string;             // Why this stage?
  confidence: number;            // 0-1 scale
  alternativeStages?: {          // Other viable options
    stage: FundingStage;
    reasoning: string;
  }[];
}

export type FundingStage =
  | 'Bootstrapped'    // No external funding needed yet
  | 'Pre-Seed'        // $50K - $500K, very early
  | 'Seed'            // $500K - $3M, product-market fit phase
  | 'Series A'        // $3M - $15M, scaling proven model
  | 'Series B'        // $15M - $50M, rapid growth
  | 'Series C+';      // $50M+, market leadership

/**
 * Recommended raise amount with range and validation
 */
export interface RaiseRecommendation {
  recommended: number;           // USD - the sweet spot
  range: {
    min: number;                 // USD - lower bound
    max: number;                 // USD - upper bound
  };
  reasoning: string;             // Why this amount?
  userGoalFeedback?: string;     // If user provided goal, validate it
  breakdownSuggestion?: {        // Optional: how to allocate
    equity: number;              // Percentage to give up
    postMoneyValuation: number;  // USD
  };
}

/**
 * Investor type recommendation with priority ranking
 */
export interface InvestorRecommendation {
  type: InvestorType;
  priority: number;              // 1 = highest priority, 5 = lowest
  reasoning: string;             // Why this type fits
  typicalCheckSize?: string;     // e.g., "$25K - $100K"
  exampleInvestors?: string[];   // Optional: specific names/firms
}

export type InvestorType =
  | 'Angel'           // Individual investors, $10K - $100K checks
  | 'Micro-VC'        // Small funds, $100K - $500K checks
  | 'Accelerator'     // Y Combinator, Techstars, etc.
  | 'Seed Fund'       // Dedicated seed VCs, $500K - $2M checks
  | 'Corporate VC'    // Strategic investors from big companies
  | 'Traditional VC'  // Established firms, Series A+
  | 'Crowdfunding';   // Kickstarter, Republic, etc.

/**
 * Runway and burn rate analysis
 */
export interface RunwayAnalysis {
  estimatedMonths: number;       // How long the money lasts
  burnRateGuidance: string;      // Prose explanation
  monthlyBurnEstimate: {         // Detailed breakdown
    min: number;                 // USD per month (conservative)
    max: number;                 // USD per month (aggressive)
    recommended: number;         // USD per month (realistic)
  };
  keyAssumptions: string[];      // What's baked into the calc
  milestoneBasedGuidance?: {     // Optional: tie to goals
    milestone: string;
    monthsToAchieve: number;
    burnByThen: number;
  }[];
}

/**
 * Financial priority allocation recommendation
 */
export interface FinancialPriority {
  category: PriorityCategory;
  allocation: number;            // Percentage of total raise
  reasoning: string;             // Why this allocation?
  suggestedSpend?: string;       // Optional: specific guidance
}

export type PriorityCategory =
  | 'Hiring'          // Salaries, recruiting, HR
  | 'Product'         // Engineering, design, infrastructure
  | 'Marketing'       // Advertising, content, brand
  | 'Sales'           // Sales team, CRM, partnerships
  | 'Operations'      // Legal, accounting, office
  | 'GTM'             // Go-to-market strategy execution
  | 'R&D'             // Research, innovation, experiments
  | 'Reserve';        // Emergency fund, buffer

/**
 * Overall confidence metrics for the strategy
 */
export interface OverallConfidence {
  overall: number;               // 0-1 scale
  factors: {
    dataCompleteness: number;    // How much info founder provided
    marketClarity: number;       // How well-defined the market is
    stageAlignment: number;      // How clear the stage is
  };
  caveats: string[];             // Disclaimers or limitations
}

// ============================================================================
// INTERMEDIATE MODELS - Used internally by agents
// ============================================================================

/**
 * Stage analysis intermediate result
 */
export interface StageAnalysisResult {
  stage: FundingStage;
  reasoning: string;
  confidence: number;
  keyFactors: string[];          // What drove this decision
}

/**
 * Raise calculation intermediate result
 */
export interface RaiseCalculationResult {
  recommended: number;
  range: { min: number; max: number };
  reasoning: string;
  methodology: string;           // How it was calculated
}

/**
 * Investor matching intermediate result
 */
export interface InvestorMatchResult {
  matches: InvestorRecommendation[];
  reasoning: string;
  marketContext?: string;        // Current investor landscape
}

/**
 * Runway calculation intermediate result
 */
export interface RunwayCalculationResult {
  estimatedMonths: number;
  burnRateGuidance: string;
  monthlyBurnEstimate: {
    min: number;
    max: number;
    recommended: number;
  };
  keyAssumptions: string[];
}

/**
 * Priority allocation intermediate result
 */
export interface PriorityAllocationResult {
  priorities: FinancialPriority[];
  reasoning: string;
  total: number;                 // Should equal 100
}

/**
 * Synthesis intermediate result
 */
export interface SynthesisResult {
  fundingNarrative: string;
  keyRisks: string[];
  nextMilestones: string[];
  confidence: OverallConfidence;
}

// ============================================================================
// API MODELS - Request/Response structures
// ============================================================================

/**
 * API request to generate finance strategy
 */
export interface FinanceStrategyRequest {
  inputs: StartupInputs;
  options?: {
    includeAlternatives?: boolean;  // Include alternative stages?
    detailedBreakdown?: boolean;    // Include detailed allocations?
    skipNarrative?: boolean;        // Skip narrative generation?
  };
}

/**
 * API response with generated strategy
 */
export interface FinanceStrategyResponse {
  success: boolean;
  strategy?: FundingStrategy;
  error?: string;
  generatedAt: string;
  processingTime?: number;         // Milliseconds
}

/**
 * API error response
 */
export interface FinanceStrategyError {
  error: string;
  code: string;                    // Error code for handling
  details?: string;                // More context
  suggestions?: string[];          // How to fix
}

// ============================================================================
// VALIDATION MODELS - For input validation
// ============================================================================

/**
 * Validation result for startup inputs
 */
export interface InputValidation {
  isValid: boolean;
  errors: ValidationError[];
  warnings: ValidationWarning[];
}

export interface ValidationError {
  field: keyof StartupInputs;
  message: string;
  code: string;
}

export interface ValidationWarning {
  field: keyof StartupInputs;
  message: string;
  suggestion: string;
}

// ============================================================================
// DISPLAY MODELS - For UI rendering
// ============================================================================

/**
 * Formatted strategy for display
 */
export interface FormattedStrategy {
  summary: {
    stage: string;
    raise: string;
    runway: string;
    topInvestor: string;
  };
  sections: StrategySection[];
  actions: SuggestedAction[];
}

export interface StrategySection {
  id: string;
  title: string;
  icon?: string;
  content: string | React.ReactNode;
  priority: 'high' | 'medium' | 'low';
}

export interface SuggestedAction {
  action: string;
  priority: 'critical' | 'important' | 'optional';
  timeframe: string;              // e.g., "This week", "This month"
  resources?: string[];           // Links, tools, contacts
}

// ============================================================================
// HELPER TYPES
// ============================================================================

/**
 * Currency formatter options
 */
export type CurrencyFormat = 'short' | 'long' | 'detailed';

/**
 * Export format options
 */
export type ExportFormat = 'json' | 'pdf' | 'markdown' | 'notion';

/**
 * Strategy history entry
 */
export interface StrategyHistory {
  id: string;
  inputs: StartupInputs;
  strategy: FundingStrategy;
  createdAt: string;
  tags?: string[];
}

